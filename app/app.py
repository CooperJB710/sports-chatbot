#!/usr/bin/env python3
"""
Flask NBA Stats Bot – serves a tiny web UI at “/” and a JSON POST API at “/chat”.
Reads from local SQLite `nba_stats.db` generated by services/etl/run_etl.py
"""
import os, re, sqlite3, json
from flask import Flask, request, jsonify

ROOT    = os.path.dirname(os.path.dirname(__file__))   # project root
DB_PATH = os.path.join(ROOT, "nba_stats.db")

app = Flask(__name__)

ALIASES = {
    "wiz": "washington wizards", "wantnos": "washington wizards",
    "lakers": "los angeles lakers",
    "celtics": "boston celtics", "celllics": "boston celtics",
    "warriors": "golden state warriors", "heat": "miami heat",
}

# ------------------------------------------------------------------ #
#  Build a map {string ➜ team_id} once at startup
# ------------------------------------------------------------------ #
def _team_map():
    try:
        with sqlite3.connect(DB_PATH) as c:
            rows = c.execute("SELECT team_id, team_name, abbrev, city FROM teams").fetchall()
    except sqlite3.OperationalError:
        print("⚠️  ️run_etl.py hasn’t been executed yet – start-up will still succeed but /chat won’t.")
        return {}
    m = {}
    for tid, name, abbr, city in rows:
        for key in {name.lower(), abbr.lower(), city.lower(),
                    f"{city.lower()} {name.split()[-1].lower()}"}:
            m[key] = tid
    return m

TEAM_ID = _team_map()
find_id = lambda raw: TEAM_ID.get(ALIASES.get(raw.lower().strip(), raw.lower().strip()))

# ------------------------------------------------------------------ #
#  Helper queries
# ------------------------------------------------------------------ #
def avg_pts(tid: int, season: int):
    sql = """
    WITH pts AS (
        SELECT home_score AS p FROM games WHERE season=? AND home_id=?
        UNION ALL
        SELECT away_score      FROM games WHERE season=? AND away_id=?
    )
    SELECT ROUND(AVG(p), 1) FROM pts;
    """
    with sqlite3.connect(DB_PATH) as c:
        return c.execute(sql, (season, tid, season, tid)).fetchone()[0]

def last_game(tid: int):
    sql = """
      SELECT date, home_id, away_id, home_score, away_score
      FROM games
      WHERE home_id = ? OR away_id = ?
      ORDER BY date DESC LIMIT 1;
    """
    with sqlite3.connect(DB_PATH) as c:
        return c.execute(sql, (tid, tid)).fetchone()

def name_of(tid: int):
    with sqlite3.connect(DB_PATH) as c:
        return c.execute("SELECT team_name FROM teams WHERE team_id=?", (tid,)).fetchone()[0]

# ------------------------------------------------------------------ #
#  Routes
# ------------------------------------------------------------------ #
@app.post("/chat")
def chat():
    question = (request.json or {}).get("question", "").lower()

    try:
        # ── average PPG ──────────────────────────────────────────────
        if "average" in question and ("points" in question or "ppg" in question):
            m = re.search(r"\b(20\d{2})\b", question)
            year = int(m.group()) if m else sqlite3.connect(DB_PATH) \
                                              .execute("SELECT MAX(season) FROM games").fetchone()[0]
            team_part = re.sub(r"\b(average|points|ppg|\d{4})\b", "", question).strip()
            tid = find_id(team_part)
            if not tid:
                return jsonify(answer="Team not recognised."), 200
            return jsonify(answer=f"{name_of(tid)} averaged {avg_pts(tid, year)} PPG in {year}.")

        # ── last game ────────────────────────────────────────────────
        if any(p in question for p in ("last game", "recent result", "last match")):
            trig = next(p for p in ("last game", "recent result", "last match") if p in question)
            tid = find_id(question.split(trig)[-1])
            if not tid:
                return jsonify(answer="Team not recognised."), 200
            row = last_game(tid)
            if not row:
                return jsonify(answer="No recent games found."), 200
            date, home, away, hs, as_ = row
            return jsonify(answer=f"🏀 {date}: {name_of(home)} {hs} – {as_} {name_of(away)}"), 200

        # ── fallback ────────────────────────────────────────────────
        return jsonify(answer="Try e.g. 'What did the Lakers average in 2024?' or "
                              "'Last game for the Warriors'"), 200

    except json.JSONDecodeError:
        return jsonify(error="Bad JSON"), 400
    except Exception as e:
        return jsonify(error=f"Server error: {e}"), 500

# ------------------------------------------------------------------ #
#  Fancy landing page (your HTML)
# ------------------------------------------------------------------ #
@app.get("/")
def home():
    return """
<!DOCTYPE html>
<html>
<head>
  <title>NBA Stats Bot</title>
  <style>
    body { font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; }
    #question { padding: 8px; width: 300px; }
    button { padding: 8px 16px; background: #0066cc; color: white; border: none; cursor: pointer; }
    button:hover { background: #0052a3; }
    #response { margin-top: 20px; padding: 15px; border: 1px solid #ddd; border-radius: 4px; min-height: 50px; }
    .examples { margin-top: 30px; color: #666; }
  </style>
</head>
<body>
  <h1>Welcome to the NBA Stats Bot</h1>
  <p>Ask about team statistics or recent games</p>

  <input id="question" placeholder="e.g. 'Last game for the Lakers'" size="40"/>
  <button onclick="ask()">Ask</button>

  <div id="response"></div>

  <div class="examples">
    <p>Try these examples:</p>
    <ul>
      <li>What did the Warriors average in 2022?</li>
      <li>Last game for the Celtics</li>
      <li>Recent result for Miami Heat</li>
    </ul>
  </div>

  <script>
    async function ask() {
      const q = document.getElementById("question").value;
      if (!q.trim()) return;

      const div = document.getElementById("response");
      div.textContent = "Thinking...";
      div.style.color = "inherit";

      try {
        const res  = await fetch("/chat", {
          method: "POST", headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ question: q })
        });
        const data = await res.json();
        if (data.answer) {
          div.textContent = data.answer;
        } else {
          div.textContent = "Error: " + (data.error || "Unknown error");
          div.style.color = "red";
        }
      } catch(e) {
        div.textContent = "Network error — try again";
        div.style.color = "red";
      }
    }
    document.getElementById("question").addEventListener("keypress",
      e => e.key === "Enter" && ask());
  </script>
</body></html>
"""

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.getenv("PORT", 8080)))
